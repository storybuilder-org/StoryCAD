#IMPORTANT - Don't forget to bump the .NET Version for Install .NET AND StoryCADTests
name: AutoBuild

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    strategy:
      matrix:
        configuration: [Release, Debug]
        platform: [x64, x86, arm64]

    runs-on: windows-latest

    env:
      Solution_Name: StoryCAD.sln

    steps:
    - name: Download Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    # Install .NET
    - name: Install .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.x.x

    #Install MSBUILD
    - name: Setup MSBuild.exe
      uses: microsoft/setup-msbuild@v2
    
    - uses: oprypin/find-latest-tag@v1.1.2
      with:
        repository: storybuilder-org/StoryCAD
        releases-only: true
      id: testtag
      
    #Bump version number
    - id: increase_version
      name: Increase Version Number 
      run: |
        $VersionRegex = "\d+\.\d+\.\d+\.\d+"
        $LastVer = "${{ steps.testtag.outputs.tag }}"
        $VersionSplit = $LastVer.Split(".")
        $BUILD_BUILDNUMBER = $VersionSplit[0] + "." + $VersionSplit[1] + ".${{ github.run_number }}.65535"
        $ManifestVersionRegex = " Version=""\d+\.\d+\.\d+\.\d+"""
        $ScriptPath = $null
        try
        {
            $ScriptPath = (Get-Variable MyInvocation).Value.MyCommand.Path
            $ScriptDir = Split-Path -Parent $ScriptPath
        }
        catch {}
        # Get and validate the version data
        $VersionData = [regex]::matches($BUILD_BUILDNUMBER,$VersionRegex)
        $NewVersion = $VersionData[0]
        Write-Verbose "Version: $NewVersion"
        $AssemblyVersion = $NewVersion
        $ManifestVersion = " Version=""$NewVersion"""
        $filecontent = Get-Content("D:\a\StoryCAD\StoryCAD\StoryCAD\Package.appxmanifest")
        attrib $file -r
        $filecontent -replace $ManifestVersionRegex, $ManifestVersion | Out-File "D:\a\StoryCAD\StoryCAD\StoryCAD\Package.appxmanifest" utf8
        echo "new_version=$NewVersion" >> $GITHUB_OUTPUT

    # Decode the base 64 encoded pfx and save the Signing_Certificate
    - name: Decode the pfx
      run: |
        $pfx_cert_byte = [System.Convert]::FromBase64String("${{ secrets.BASE64_ENCODED_PFX }}")
        $certificatePath = "GitHubActionsWorkflow.pfx"
        [IO.File]::WriteAllBytes("$certificatePath", $pfx_cert_byte)
        [IO.File]::WriteAllText("D:\a\StoryCAD\StoryCAD\StoryCAD\.env", "${{ secrets.ENV }}")
        [IO.File]::WriteAllText("D:\a\StoryCAD\StoryCAD\StoryCADTests\.env", "${{ secrets.ENV }}")

    # Restore the application to populate the obj folder with RuntimeIdentifiers
    - name: Restore the application
      run: msbuild $env:Solution_Name /t:Restore /p:Configuration=$env:Configuration
      env:
        Configuration: ${{ matrix.configuration }}
        
    - name: Debug New Version
      run: echo "The new version is ${{ steps.increase_version.outputs.new_version }}"        
        

    - name: Build StoryCADLib
      run: |
        msbuild StoryCADLib\StoryCADLib.csproj /t:Build /p:Configuration=Release /p:Version=${{ steps.increase_version.outputs.new_version }} /p:NuGetVersion=${{ steps.increase_version.outputs.new_version }} /p:AssemblyVersion=${{ steps.increase_version.outputs.new_version }}

        
    - name: Restore and Build StoryCADTests
      run: msbuild StoryCADTests\StoryCADTests.csproj /t:Build /p:Configuration=Debug /p:Platform=x64

    - name: Setup VSTest.console.exe
      uses: darenm/Setup-VSTest@v1.2

    - name: Run StoryCADTests
      run: vstest.console.exe D:\a\StoryCAD\StoryCAD\StoryCADTests\bin\x64\Debug\net8.0-windows10.0.19041.0\StoryCADTests.dll /Logger:Console /Platform:x64

        
    # Create the app package by building and packaging the project
    - name: Create the MSIX
      run: msbuild $env:Solution_Name /p:Configuration=$env:Configuration /p:Platform=$env:Platform /p:UapAppxPackageBuildMode=$env:Appx_Package_Build_Mode /p:AppxBundle=$env:Appx_Bundle /p:PackageCertificateKeyFile="D:\a\StoryCAD\StoryCAD\GitHubActionsWorkflow.pfx" /p:AppxPackageDir="$env:Appx_Package_Dir" /p:GenerateAppxPackageOnBuild=true
      env:
        Appx_Bundle: Never
        Appx_Package_Build_Mode: SideloadOnly
        Appx_Package_Dir: Packages\
        Configuration: ${{ matrix.configuration }}
        Platform: ${{ matrix.platform }}
        
    # Remove the pfx
    - name: Remove the pfx
      run: |
        Remove-Item -path GitHubActionsWorkflow.pfx
      
   #Cleans output and file names
    - name: Run MSIX Cleaner
      run: |
        D:\a\StoryCAD\StoryCAD\.github\workflows\MSIX.ps1 -TargetDirectory "D:\a\StoryCAD\StoryCAD\StoryCAD\Packages"
      shell: pwsh

    - name: Move StoryCADLib Nuget Package to Packages Directory
      run: |
        Get-ChildItem -Path "D:\a\StoryCAD\StoryCAD\StoryCADLib\bin\x64\*" -Include *.nupkg,*.snupkg -File |
          Move-Item -Destination "D:\a\StoryCAD\StoryCAD\StoryCAD\Packages\" -Force


    - name: Write help file
      run: |
        $LastVer = "${{ steps.testtag.outputs.tag }}"
        $VersionSplit = $LastVer.Split(".")
        $BUILD_BUILDNUMBER = $VersionSplit[0] + "." + $VersionSplit[1] + ".${{ github.run_number }}.65535"
      
        "Hello, Thank you for testing StoryCAD " + ${{ steps.increase_version.outputs.new_version }} + " Alpha 
        1) Open StoryCAD.cer, this should bring up the certificate import wizard
        2) Press install certificate, and change store location to Local Machine, then press next
        3) Change the option to Place All Certificates in the following store and click browse
        4) Select Trusted People and press OK and then press finish
        Now you will want to open the msix folder and select the configuration you want, 
        if you don't know what configuration to pick then we recommend StoryCAD Release x64.msix.
        
        Changelogs aren't available for Alpha Builds." | Out-File -FilePath "D:\a\StoryCAD\StoryCAD\StoryCAD\Packages\Install Instructions.txt"
    
    - name: Repack StoryCADLib NuGet Package
      run: |
        $packagesDir = "D:\a\StoryCAD\StoryCAD\StoryCAD\Packages"
        # Locate the single nuget package
        $pkg = Get-ChildItem -Path $packagesDir -Filter "StoryCADLib*.nupkg" -File
        if ($null -eq $pkg) {
            Write-Error "No StoryCADLib nuget package found in $packagesDir"
            exit 1
        }
        if ($pkg.Count -gt 1) {
            Write-Error "Multiple StoryCADLib nuget packages found. Expected only one but found $($pkg.Count)."
            exit 1
        }
        Write-Host "Found package: $($pkg.FullName)"
        
        # Create a temporary extraction directory
        $tempDir = Join-Path $env:TEMP ("NuPkgExtract_" + [guid]::NewGuid().ToString())
        New-Item -ItemType Directory -Force -Path $tempDir | Out-Null
        
        # Unzip the nuget package (nuget packages are zip archives)
        Expand-Archive -Path $pkg.FullName -DestinationPath $tempDir -Force

        # Define the source folder for the Release build binaries
        $sourceBinaries = "D:\a\StoryCAD\StoryCAD\StoryCADLib\bin\x64\Release\net8.0-windows10.0.22621.0"
        # Define the target folder in the package (lib folder for the target framework)
        $targetLibDir = Join-Path $tempDir "lib\net8.0-windows10.0.22621.0"
        if (-not (Test-Path $targetLibDir)) {
            New-Item -ItemType Directory -Force -Path $targetLibDir | Out-Null
        }
        Write-Host "Copying binaries from $sourceBinaries to $targetLibDir"
        Copy-Item -Path (Join-Path $sourceBinaries "*") -Destination $targetLibDir -Recurse -Force

        # Rezip the updated package to a temporary file
        $updatedPkgPath = Join-Path $env:TEMP ("updated_" + $pkg.Name)
        Compress-Archive -Path (Join-Path $tempDir "*") -DestinationPath $updatedPkgPath -Force
        # Overwrite the original nuget package with the updated version
        Move-Item -Path $updatedPkgPath -Destination $pkg.FullName -Force

        # Clean up temporary extraction folder
        Remove-Item -Recurse -Force $tempDir
      shell: pwsh

    
    - name: Zip the packages folder
      run: |
            $zipName = "StoryCAD_${{ github.run_number }}_${{ matrix.platform }}_${{ matrix.configuration }}.zip"
            Compress-Archive -Path "D:\a\StoryCAD\StoryCAD\StoryCAD\Packages\*" -DestinationPath $zipName -Force
      shell: pwsh
    
    - name: Upload MSIX package
      uses: actions/upload-artifact@v4
      with:
        name: StoryCAD_${{ github.run_number }}_${{ matrix.platform }}_${{ matrix.configuration }}
        path: StoryCAD_${{ github.run_number }}_${{ matrix.platform }}_${{ matrix.configuration }}.zip
        compression-level: 9
        include-hidden-files: true  
