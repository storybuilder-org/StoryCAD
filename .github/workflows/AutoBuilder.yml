# AutoBuild – workspace‑agnostic version (uses ${{ github.workspace }})
# IMPORTANT – Don't forget to bump the .NET version for Install .NET **and** StoryCADTests

name: AutoBuild

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    strategy:
      matrix:
        configuration: [ Release, Debug ]
        platform: [ x64, x86, arm64 ]

    runs-on: windows-latest

    env:
      Solution_Name: StoryCAD.sln
      # Make workspace root easy to reference in PowerShell
      WORK_DIR: ${{ github.workspace }}

    steps:
    # ------------------------------------------------------
    - name: Download Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    # ------------------------------------------------------
    # Install .NET SDK & runtime
    - name: Install .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.x.x

    # ------------------------------------------------------
    # Install MSBuild
    - name: Setup MSBuild.exe
      uses: microsoft/setup-msbuild@v2

    # ------------------------------------------------------
    - uses: oprypin/find-latest-tag@v1.1.2
      with:
        repository: storybuilder-org/StoryCAD
        releases-only: true
      id: testtag

    # ------------------------------------------------------
    # Bump version number – all paths via $env:WORK_DIR
    - id: increase_version
      name: Increase Version Number
      shell: pwsh
      run: |
        # Regex helpers
        $VersionRegex         = '\d+\.\d+\.\d+\.\d+'            # unchanged
        $ManifestVersionRegex = ' Version="\d+\.\d+\.\d+\.\d+"'  # <-- fixed
    
        $LastVer            = '${{ steps.testtag.outputs.tag }}'
        $VersionSplit       = $LastVer.Split('.')
        $BUILD_BUILDNUMBER  = "$($VersionSplit[0]).$($VersionSplit[1]).${{ github.run_number }}.65534"
    
        # workspace-relative paths
        $repoRoot     = $env:WORK_DIR
        $manifestPath = Join-Path $repoRoot 'StoryCAD\Package.appxmanifest'
    
        # Calculate & write new version
        $NewVersion = ([regex]::Match($BUILD_BUILDNUMBER,$VersionRegex)).Value
        attrib $manifestPath -r
        (Get-Content $manifestPath) -replace $ManifestVersionRegex, " Version=\"$NewVersion\"" |
          Out-File $manifestPath -Encoding utf8
    
        "new_version=$NewVersion" | Out-File -Append -FilePath $env:GITHUB_OUTPUT

    # ------------------------------------------------------
    # Decode the base64‑encoded pfx and write .env files
    - name: Decode the pfx & write env files
      shell: pwsh
      run: |
        $repoRoot = $env:WORK_DIR
        $pfx_cert_byte = [Convert]::FromBase64String("${{ secrets.BASE64_ENCODED_PFX }}")
        $certificatePath = Join-Path $repoRoot 'GitHubActionsWorkflow.pfx'
        [IO.File]::WriteAllBytes($certificatePath, $pfx_cert_byte)

        [IO.File]::WriteAllText((Join-Path $repoRoot 'StoryCAD\.env'),      "${{ secrets.ENV }}")
        [IO.File]::WriteAllText((Join-Path $repoRoot 'StoryCADTests\.env'), "${{ secrets.ENV }}")

    # ------------------------------------------------------
    # Restore the solution – keeps obj folder happy
    - name: Restore the application
      run: msbuild $env:Solution_Name /t:Restore /p:Configuration=$env:Configuration
      env:
        Configuration: ${{ matrix.configuration }}

    # ------------------------------------------------------
    # Build StoryCADLib
    - name: Build StoryCADLib
      run: |
        msbuild StoryCADLib\StoryCADLib.csproj /t:Build /
          p:Configuration=Release /
          p:Version=${{ steps.increase_version.outputs.new_version }} /
          p:NuGetVersion=${{ steps.increase_version.outputs.new_version }} /
          p:AssemblyVersion=${{ steps.increase_version.outputs.new_version }}
      shell: pwsh

    # ------------------------------------------------------
    # Build tests
    - name: Restore and Build StoryCADTests
      run: msbuild StoryCADTests\StoryCADTests.csproj /t:Build /p:Configuration=Debug /p:Platform=x64

    - name: Setup VSTest.console.exe
      uses: darenm/Setup-VSTest@v1.2

    - name: Run StoryCADTests
      shell: pwsh
      run: |
        $testDll = Join-Path $env:WORK_DIR 'StoryCADTests\bin\x64\Debug\net8.0-windows10.0.19041.0\StoryCADTests.dll'
        vstest.console.exe $testDll /Logger:Console /Platform:x64

    # ------------------------------------------------------
    # Create the MSIX package
    - name: Create the MSIX
      shell: pwsh
      run: |
        $pfxPath = Join-Path $env:WORK_DIR 'GitHubActionsWorkflow.pfx'
        msbuild $env:Solution_Name `
          /p:Configuration=$env:Configuration `
          /p:Platform=$env:Platform `
          /p:UapAppxPackageBuildMode=$env:Appx_Package_Build_Mode `
          /p:AppxBundle=$env:Appx_Bundle `
          /p:PackageCertificateKeyFile="$pfxPath" `
          /p:AppxPackageDir="$env:Appx_Package_Dir" `
          /p:GenerateAppxPackageOnBuild=true
      env:
        Appx_Bundle: Never
        Appx_Package_Build_Mode: SideloadOnly
        Appx_Package_Dir: Packages\
        Configuration: ${{ matrix.configuration }}
        Platform: ${{ matrix.platform }}

    # ------------------------------------------------------
    # Remove the pfx once done
    - name: Remove the pfx
      shell: pwsh
      run: Remove-Item -Path (Join-Path $env:WORK_DIR 'GitHubActionsWorkflow.pfx') -Force

    # ------------------------------------------------------
    # Clean MSIX output names
    - name: Run MSIX Cleaner
      shell: pwsh
      run: |
        $script = Join-Path $env:WORK_DIR '.github\workflows\MSIX.ps1'
        $target = Join-Path $env:WORK_DIR 'StoryCAD\Packages'
        & $script -TargetDirectory $target

    # ------------------------------------------------------
    # Move StoryCADLib NuGet package into Packages dir
    - name: Move StoryCADLib NuGet Package to Packages Directory
      shell: pwsh
      run: |
        $repoRoot = $env:WORK_DIR
        Get-ChildItem -Path (Join-Path $repoRoot 'StoryCADLib\bin\x64') -Include *.nupkg,*.snupkg -File |
          Move-Item -Destination (Join-Path $repoRoot 'StoryCAD\Packages') -Force

    # ------------------------------------------------------
    # Write help file
    - name: Write help file
      shell: pwsh
      run: |
        $repoRoot = $env:WORK_DIR
        $helpPath = Join-Path $repoRoot 'StoryCAD\Packages\Install Instructions.txt'
        $LastVer   = "${{ steps.testtag.outputs.tag }}"
        $VersionSplit = $LastVer.Split('.')
        $BUILD_BUILDNUMBER = "$($VersionSplit[0]).$($VersionSplit[1]).${{ github.run_number }}.65534"

        @"
          Hello, Thank you for testing StoryCAD ${{ steps.increase_version.outputs.new_version }} Alpha

        1)  Open StoryCAD.cer – this will start the certificate import wizard.
        2)  Select **Local Machine**, press *Next*.
        3)  Choose **Place all certificates in the following store**, click *Browse*.
        4)  Pick **Trusted People**, press *OK*, then *Finish*.
        
        Now open the **msix** folder and pick the configuration you want – most users should take **StoryCAD Release x64.msix**.
        
        Changelogs aren’t available for Alpha builds.
        "@ |
          Out-File -FilePath $helpPath -Force -Encoding utf8

    # ------------------------------------------------------
    # Re‑pack NuGet (only once – Release x64)
    - name: Repack StoryCADLib NuGet Package
      if: ${{ matrix.configuration == 'Release' && matrix.platform == 'x64' }}
      shell: pwsh
      run: |
        $repoRoot = $env:WORK_DIR

        # 1. Find the release .nupkg
        $allNupkg   = Get-ChildItem -Path $repoRoot -Filter 'StoryCADLib*.nupkg' -Recurse
        $releasePkg = $allNupkg | Where-Object FullName -Match '\\Release\\' | Select-Object -First 1

        # 2. Unzip to temp
        $tempDir = Join-Path $env:TEMP ("NuPkg_" + [guid]::NewGuid())
        Expand-Archive -Path $releasePkg.FullName -DestinationPath $tempDir -Force

        # 3. Copy compiled binaries
        $binSrc  = Join-Path $repoRoot 'StoryCADLib\bin\x64\Release\net8.0-windows10.0.22621.0'
        $libDir  = Join-Path $tempDir  'lib\net8.0-windows10.0.22621'
        New-Item -ItemType Directory -Force -Path $libDir | Out-Null
        Copy-Item "$binSrc\*" -Destination $libDir -Recurse -Force

        # 4. Copy Assets
        $assetsSrc  = Join-Path $repoRoot 'StoryCADLib\Assets'
        $assetsDest = Join-Path $libDir  'StoryCADLib'
        New-Item -ItemType Directory -Force -Path $assetsDest | Out-Null
        Copy-Item "$assetsSrc\*" -Destination $assetsDest -Recurse -Force

        # 5. Re‑zip & overwrite original
        $outPkg = Join-Path $env:TEMP ("updated_" + $releasePkg.Name)
        Compress-Archive -Path (Join-Path $tempDir '*') -DestinationPath $outPkg -Force
        Move-Item -Path $outPkg -Destination $releasePkg.FullName -Force

        # 6. Cleanup
        Remove-Item -Recurse -Force $tempDir

    # ------------------------------------------------------
    # Zip the Packages folder
    - name: Zip the packages folder
      shell: pwsh
      run: |
        $repoRoot = $env:WORK_DIR
        $zipName  = "StoryCAD_${{ github.run_number }}_${{ matrix.platform }}_${{ matrix.configuration }}.zip"
        Compress-Archive -Path (Join-Path $repoRoot 'StoryCAD\Packages\*') -DestinationPath $zipName -Force

    # ------------------------------------------------------
    # Upload artefacts
    - name: Upload repacked NuGet Package
      if: ${{ matrix.configuration == 'Release' && matrix.platform == 'x64' }}
      uses: actions/upload-artifact@v4
      with:
        name: repacked-nuget-package
        path: '${{ env.WORK_DIR }}\\StoryCADLib\\bin\\Release\\StoryCADLib*.nupkg'

    - name: Upload MSIX package
      uses: actions/upload-artifact@v4
      with:
        name: StoryCAD_${{ github.run_number }}_${{ matrix.platform }}_${{ matrix.configuration }}
        path: StoryCAD_${{ github.run_number }}_${{ matrix.platform }}_${{ matrix.configuration }}.zip
        compression-level: 9
        include-hidden-files: true
