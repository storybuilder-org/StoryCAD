# IMPORTANT - Don't forget to bump the .NET version for Install .NET AND StoryCADTests
name: ReleaseBuilder

on:
  workflow_dispatch:
    inputs:
      VersionNumber:
        description: 'Version'
        required: true
        default: '2.13.0.0'

jobs:
  build:
    runs-on: windows-latest
    env:
      Solution_Name: StoryCAD.sln

    steps:
    - name: Checkout repo
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Install .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.x.x

    - name: Setup MSBuild
      uses: microsoft/setup-msbuild@v2

    # ─── Version bump ────────────────────────────────────────────────────────────
    - name: Bump appxmanifest version
      shell: pwsh
      run: |
        $ver="${{ github.event.inputs.VersionNumber }}"
        $regex=' Version="\d+\.\d+\.\d+\.\d+"'
        (Get-Content "D:\a\StoryCAD\StoryCAD\StoryCAD\Package.appxmanifest") `
          -replace $regex, " Version=""$ver""" |
          Set-Content "D:\a\StoryCAD\StoryCAD\StoryCAD\Package.appxmanifest" -Encoding utf8

    # ─── Cert / env ──────────────────────────────────────────────────────────────
    - name: Decode signing PFX & write .env files
      shell: pwsh
      run: |
        [IO.File]::WriteAllBytes("GitHubActionsWorkflow.pfx",
          [Convert]::FromBase64String("${{ secrets.BASE64_ENCODED_PFX }}"))
        [IO.File]::WriteAllText("D:\a\StoryCAD\StoryCAD\StoryCAD\.env",      "${{ secrets.ENV }}")
        [IO.File]::WriteAllText("D:\a\StoryCAD\StoryCAD\StoryCADTests\.env", "${{ secrets.ENV }}")

    # ─── Restore / build ────────────────────────────────────────────────────────
    - name: Restore solution (Release + Debug)
      shell: pwsh
      run: |
        msbuild $env:Solution_Name /t:Restore /p:Configuration=Release
        msbuild $env:Solution_Name /t:Restore /p:Configuration=Debug

    - name: Build StoryCADLib (NuGet)
      shell: pwsh
      run: |
        msbuild StoryCADLib\StoryCADLib.csproj `
          /t:Build `
          /p:Configuration=Release `
          /p:Platform=x64 `
          /p:Version=${{ github.event.inputs.VersionNumber }} `
          /p:NuGetVersion=${{ github.event.inputs.VersionNumber }} `
          /p:AssemblyVersion=${{ github.event.inputs.VersionNumber }}

    - name: Build StoryCADTests (Debug /x64)
      shell: pwsh
      run: msbuild StoryCADTests\StoryCADTests.csproj /t:Build /p:Configuration=Debug /p:Platform=x64

    - name: Setup VSTest
      uses: darenm/Setup-VSTest@v1.2

    - name: Run unit tests
      shell: pwsh
      run: >
        vstest.console.exe
        D:\a\StoryCAD\StoryCAD\StoryCADTests\bin\x64\Debug\net8.0-windows10.0.19041.0\StoryCADTests.dll
        /Logger:Console /Platform:x64

    # ─── App packages ───────────────────────────────────────────────────────────
    - name: Create MSIX packages (x64, x86, arm64)
      shell: pwsh
      env:
        Appx_Bundle: Never
        Appx_Package_Build_Mode: SideloadOnly
        Appx_Package_Dir: Packages\
      run: |
        foreach ($plat in 'x64','x86','arm64') {
          msbuild $env:Solution_Name `
            /p:Configuration=Release `
            /p:Platform=$plat `
            /p:UapAppxPackageBuildMode=$env:Appx_Package_Build_Mode `
            /p:AppxBundle=$env:Appx_Bundle `
            /p:PackageCertificateKeyFile="D:\a\StoryCAD\StoryCAD\GitHubActionsWorkflow.pfx" `
            /p:PackageCertificateKeyFile="D:\a\StoryCAD\StoryCAD\GitHubActionsWorkflow.pfx" `
            /p:AppxPackageDir="$env:Appx_Package_Dir" `
            /p:GenerateAppxPackageOnBuild=true
        }

    - name: Remove PFX
      shell: pwsh
      run: Remove-Item GitHubActionsWorkflow.pfx

    - name: Run MSIX cleaner
      shell: pwsh
      run: >
        D:\a\StoryCAD\StoryCAD\.github\workflows\MSIX.ps1
        -TargetDirectory "D:\a\StoryCAD\StoryCAD\StoryCAD\Packages"

    # ─── NuGet repack ───────────────────────────────────────────────────────────
    - name: Move StoryCADLib package into Packages/
      shell: pwsh
      run: |
        Get-ChildItem "D:\a\StoryCAD\StoryCAD\StoryCADLib\bin\x64" -Filter *.nupkg,*.snupkg -Recurse |
          Move-Item -Destination "D:\a\StoryCAD\StoryCAD\StoryCAD\Packages" -Force

    - name: Repack StoryCADLib with runtime binaries & Assets
      shell: pwsh
      run: |
        $pkg = Get-ChildItem "D:\a\StoryCAD\StoryCAD" -Filter "StoryCADLib*.nupkg" -Recurse |
               Where-Object FullName -Match "\\Release\\" | Select-Object -First 1
        $tmp  = Join-Path $env:TEMP ("nupkg_" + [guid]::NewGuid())
        Expand-Archive  $pkg.FullName $tmp -Force
        $lib  = Join-Path $tmp "lib\net8.0-windows10.0.22621"
        New-Item $lib -ItemType Directory -Force | Out-Null
        Copy-Item "D:\a\StoryCAD\StoryCAD\StoryCADLib\bin\x64\Release\net8.0-windows10.0.22621.0\*" $lib -Recurse -Force
        Copy-Item "D:\a\StoryCAD\StoryCAD\StoryCADLib\Assets\*" (Join-Path $lib StoryCADLib) -Recurse -Force
        Compress-Archive -Path (Join-Path $tmp '*') -DestinationPath $pkg.FullName -Force
        Remove-Item $tmp -Recurse -Force

    # ─── Help file & zipping ───────────────────────────────────────────────────
    - name: Write install instructions
      shell: pwsh
      run: |
        @"
Hello, Thank you for using StoryCAD Release ${{ github.event.inputs.VersionNumber }}

1) Open StoryCAD.cer to launch the certificate import wizard.
2) Choose **Local Machine** store location → Next.
3) Select **Place all certificates in the following store** → **Trusted People**.
4) Click **Finish**.

Open **Packages/** and run *StoryCAD Release x64.msix* (recommended).

See what’s changed:
https://github.com/StoryBuilder-org/StoryCAD/releases/tag/${{ github.event.inputs.VersionNumber }}
"@ | Set-Content "D:\a\StoryCAD\StoryCAD\StoryCAD\Packages\Install Instructions.txt"

    - name: Zip Packages → Release.zip
      uses: thedoctor0/zip-release@master
      with:
        type: zip
        filename: Release.zip
        path: D:\a\StoryCAD\StoryCAD\StoryCAD\Packages\

    # ─── Upload artefacts ──────────────────────────────────────────────────────
    - name: Upload MSIX packages
      uses: actions/upload-artifact@v4
      with:
        name: StoryCAD
        path: StoryCAD/StoryCAD/StoryCAD/Packages/*
        compression-level: 9
        include-hidden-files: true

    - name: Upload repacked NuGet
      uses: actions/upload-artifact@v4
      with:
        name: repacked-nuget-package
        path: D:\a\StoryCAD\StoryCAD\StoryCADLib\bin\Release\StoryCADLib*.nupkg

    # ─── Tag & GitHub release ─────────────────────────────────────────────────
    - name: Configure Git
      shell: pwsh
      run: |
        git config user.name  "Release Builder"
        git config user.email "jake@storybuilder.org"

    - name: Tag commit
      shell: pwsh
      run: |
        git tag -a "${{ github.event.inputs.VersionNumber }}" -m "${{ github.event.inputs.VersionNumber }}"
        git push origin "${{ github.event.inputs.VersionNumber }}"

    - name: Publish GitHub release
      uses: softprops/action-gh-release@v1
      with:
        files: Release.zip
        tag_name: ${{ github.event.inputs.VersionNumber }}
        draft: false
        fail_on_unmatched_files: true
        generate_release_notes: false
        token: ${{ secrets.GitHubToken }}